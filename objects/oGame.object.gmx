<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
global.debug = true;

randomize();                        // gives a random seed EVERY time the game is run
texture_set_interpolation(false);   // gets rid of "smudginess" on sprites

global.room_count = 0;                     // room count. determines what you find in a room (NOTE: will have to figure out a way to save specific room to file)
global.room_horizontal = false;
tile_size = 10;                     // the size of each cell on the screen. (mess with this to get weird overlapping effects)

room_dimensions(220, 160);

// array of objects for proc generation
ground[0] = oRoad;
ground[1] = oGrass;
ground[2] = oSpace;

wall[0] = oRoad;
wall[1] = oTree;
wall[2] = oSpace;

tree[100] = 0;

enemy_pos[5, 2] = 0;
smashes_pos[2, 2] = 0;

generate = true;                        // if set to true, regenerates the level. set to true at create, bc gen code is in the STEP, not CREATE, so has to generate when game is started
turn = false;                           // if true, a turn will be taken. should only happen when player tries to move
turn_timer_init = 10;
turn_timer = 0;

//instance_create(0, 0, oScreen);

smashes = 0;
if (global.debug == true)
{
    smashes = 300;
}
smashed = 0;

draw_set_font(font2);
draw_set_halign(fa_left);

font[0] = font2;
font[1] = font2it;

font_timer_init = 30;
font_timer = font_timer_init;

global.player = instance_create(r_width / 2, r_height / 2, oPlayer);    //spawn the player in the middle of the room. (NOTE: does it need to be global? should only ever be 1 player, can refer to oPlayer)
global.win = false;
global.final_score = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Shake Init
screen_shake_init();                // initializes variables for screen shake
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug init
fps_timer_init = 60;
fps_timer = fps_timer_init;
fps_string = "FPS = " + string(round(fps_real));

inst_string = "Instance # = " + string(instance_count);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map Processing

//Map Generate

check_room_change();

turn = false;

if (!instance_exists(oPlayer) )
{
    if turn_timer &lt;= 0
    {
        turn_timer = turn_timer_init;
        turn = true;
    }
    else
    {
        turn_timer -= 1;
        turn = false;
    }
    if !instance_exists(oMessage)
    {
        create_message(10, 10, "U DIDN'T MAKE IT#PRESS ENTER");
    }
    if keyboard_check(vk_enter)
    {
        room_restart();
    }
}

game_quit();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Shake
screen_shake_check();   // checks if the screen is set to shake, then sets shake values
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

//FPS timer. stops FPS from cycling so fast you can't see what the number is
if (global.debug == true)
{
    if (fps_timer &gt; 0)
    {
        fps_timer -= 1;
    }
    else
    {
        fps_timer = fps_timer_init;
        fps_string = "FPS = " + string(round(fps_real));
    }
    
    inst_string = "Instance cnt = " + string(instance_count);
    rooms_string = "Room \# = " + string(global.room_count);
    smashes_string = "Smashes = " + string(smashes);
    smashed_string = "Trees Smashed = " + string(smashed);
    trees_string = "Trees # = " + string(instance_number(oTree));
    rubble_string = "Rubble # = " + string(instance_number(oRubble));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
//draw_set_font(fontScore);               // sets the font (NOTE: can this just happen once? does it need to happen every step?)
//draw_set_halign(fa_left);               // aligns all the text to the left

for (var a = 0; a &lt; r_width; a++)       // loops through the display array
{
    for (var b = 0; b &lt; r_height; b++)
    {
        var cell = map_update[a, b];    // captures the current cell of the array in a temp var
        //draw_set_font(font[cell.italic]);
        draw_text_colour ( a * tile_size + shake /*+ cell.anim*/, b * tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 1);
                                        // draws the cell's font with the cell's colour to it's proper spot on the screen
                                        // NOTE: THIS IS DRAWING THE SHAKE OFFSET STUFF! set it so it only draws normal, put shake in shake function
        if shaking == true              // checks if shake is on, if so, draws shake-offset characters
        {
            draw_text_colour ( a * tile_size - shake, b * tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 0.2);
                                        // draws a faint double in the opposite direciton of the opaque characters
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw

if (global.debug == true)
{
    //draw the FPS, top left
    draw_text_ext_colour(10, 11, fps_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
    
    //draw the number of instances
    draw_text_ext_colour(10, 22, inst_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
    
    //draw the number of rooms
    draw_text_ext_colour(10, 33, rooms_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
    
    //draw the number of rooms
    draw_text_ext_colour(10, 44, smashes_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
    
    //draw the number of trees smashed
    draw_text_ext_colour(10, 55, smashed_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
    
    //draw the number of trees 
    draw_text_ext_colour(10, 77, trees_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
    
    //draw the number of trees smashed
    draw_text_ext_colour(10, 99, rubble_string, 12, 200, c_white, c_white, c_white, c_white, 0.3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
