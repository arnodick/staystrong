<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Settings
if !(instance_exists(oScreen))
{
    instance_create(0, 0, oScreen);
}

//TODO: make left alignment unnecessary
draw_set_halign(fa_left);

global.final_score = 0;
global.debug = false;

room_dimensions(220, 160);

room_count = 0;     // room count. determines what you find in a room (NOTE: will have to figure out a way to save specific room to file)
room_horizontal = false;    //horizontal rooms have diff colours, more enemies, powerups, etc
generate = false;    // if set to true, regenerates the level. set to true at create, bc gen code is in the STEP, not CREATE, so has to generate when game is started

turn = false;   // if true, a turn will be taken. should only happen when player tries to move
turn_timer_dead = 0;    //real time timer for when player dies                 
smashed = 0;
last_room_smashes = 1;  //the amount of smashes player had last turn. if 0, lots of enemies
win = false;

//arrays for room gen. TODO: get rid of all of these
tree[100] = 0;  //used in room generate for some reason? TODO: might not need
enemy_pos[5, 2] = 0;
smashes_pos[2, 2] = 0;

room_generate(map_grid.middle);

//TODO: put this in room gen. is causing problems with updting map properly
//instance_create(r_width/2, r_height/2, oPlayer);

/*
//animation stuff(?)
font[0] = font2;
font[1] = font2it;

font_timer_init = 30;
font_timer = font_timer_init;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug init
fps_timer_init = 60;
fps_timer = fps_timer_init;
fps_string = "FPS = " + string(round(fps_real));

debug_colour = c_white;

inst_string = "Instance # = " + string(instance_count);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Controller
// checks if player is alive, changes rooms, etc.

turn = false;
if (key_arrows_check_pressed())
{
    turn = true;
}

if (!instance_exists(oPlayer) )
{
    //when player is dead, automatically take turns every 6 gamesteps
    if (turn_timer_dead &lt;= 0)
    {
        turn_timer_dead = 6;
        turn = true;
    }
    else
    {
        turn_timer_dead -= 1;
        //turn = false;
    }
    
    if (!instance_exists(oMessage))
    {
        create_message(10, 10, "U DIDN'T MAKE IT#PRESS ENTER");
    }
    if keyboard_check_pressed(vk_enter)
    {
        audio_stop_all();
        room_restart();
    }
}
else
{
    check_room_change();
}

if (keyboard_check_pressed(ord('D')))
{
    global.debug = !global.debug;
}

if keyboard_check_pressed(vk_escape)    // exits the game if escape is pressed
{
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

//FPS timer. stops FPS from cycling so fast you can't see what the number is
if (global.debug == true)
{
    if (fps_timer &gt; 0)
    {
        fps_timer -= 1;
    }
    else
    {
        fps_timer = fps_timer_init;
        fps_string = "FPS = " + string(round(fps_real));
    }
    
    inst_string = "Instance cnt = " + string(instance_count);
    rooms_string = "Room \# = " + string(room_count);
    if (instance_exists(oPlayer))
    {
        smashes_string = "Smashes = " + string(oPlayer.smashes);
    }
    else
    {
        smashes_string = "0";
    }
    smashed_string = "Trees Smashed = " + string(smashed);
    trees_string = "Trees \# = " + string(instance_number(oTree));
    rubble_string = "Rubble \# = " + string(instance_number(oRubble));
    if (instance_exists(oPlayer))
    {
        item_string = "Items = " + string(oPlayer.items);
        if (instance_exists(oEnemy))
        {
            var enemy = instance_nearest(oPlayer.x, oPlayer.y, oEnemy);
            dir_string = string( (point_direction(enemy.x, enemy.y, oPlayer.x, oPlayer.y) div 90 ) );
            dir_mod = string( ((point_direction(enemy.x, enemy.y, oPlayer.x, oPlayer.y) div 45 )) mod 2 );
        }
        else
        {
            var enemy = 0;
            dir_string = 0;
            dir_mod = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Instances
//draws all the instances in the room on a grid

for (var a = 0; a &lt; r_width; a++)       // loops through the display array
{
    for (var b = 0; b &lt; r_height; b++)
    {
        // captures the current cell of the array in a temp var
        var cell = map_update[a, b];
        // draws the cell's colour, character, etc.
        //TODO: put draw position calculations in the object, rather than in draw?
        draw_text_colour ( a * map_grid.tile_size /*+ cell.anim*/, b * map_grid.tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw

if (global.debug == true)
{
    //draw the FPS, top left
    draw_text_ext_colour(10, 10, fps_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw the number of instances
    draw_text_ext_colour(10, 20, inst_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw the number of rooms
    draw_text_ext_colour(10, 30, rooms_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw the number of rooms
    draw_text_ext_colour(10, 40, smashes_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw the number of trees smashed
    draw_text_ext_colour(10, 50, smashed_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw the number of trees 
    draw_text_ext_colour(10, 60, trees_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw the number of trees smashed
    draw_text_ext_colour(10, 70, rubble_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //draw player's items
    draw_text_ext_colour(10, 80, item_string, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //num of screen objects
    draw_text_ext_colour(10, 90, "Screens = " + string(instance_number(oScreen)), 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //enemy dieciton
    draw_text_ext_colour(10, 100, "Enemy dir = " + dir_string + " " + dir_mod, 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
    
    //player's move_type
    draw_text_ext_colour(10, 110, "Move_type = " + string(oPlayer.move_type), 12, 200, debug_colour, debug_colour, debug_colour, debug_colour, 0.3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
